{"version":3,"sources":["hooks/useWordGame.js","App.js","index.js"],"names":["useWordGame","startingTime","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","textBoxRef","useRef","useEffect","setTimeout","time","trim","split","filter","word","length","calculateWordCount","handleChange","e","value","target","startGame","current","disabled","focus","App","ref","onChange","onClick","ReactDOM","render","document","getElementById"],"mappings":"kMAqDeA,MAnDf,SAAqBC,GAAe,IAAD,EACTC,mBAAS,IADA,mBAC1BC,EAD0B,KACpBC,EADoB,OAESF,mBAASD,GAFlB,mBAE1BI,EAF0B,KAEXC,EAFW,OAGSJ,oBAAS,GAHlB,mBAG1BK,EAH0B,KAGXC,EAHW,OAICN,mBAAS,GAJV,mBAI1BO,EAJ0B,KAIfC,EAJe,KAK3BC,EAAaC,iBAAO,MAmC1B,OAVAC,qBAAU,WACJN,GAAiBF,EAAgB,EACnCS,YAAW,WACTR,GAAiB,SAACS,GAAD,OAAUA,EAAO,OACjC,KACwB,IAAlBV,IATXG,GAAiB,GACjBE,EAfF,SAA4BP,GAE1B,OADiBA,EAAKa,OAAOC,MAAM,KACnBC,QAAO,SAACC,GAAD,MAAmB,KAATA,KAAaC,OAajCC,CAAmBlB,OAW/B,CAACE,EAAeE,IAEZ,CACLI,aACAW,aAnCF,SAAsBC,GAAI,IAChBC,EAAUD,EAAEE,OAAZD,MACRpB,EAAQoB,IAkCRrB,OACAI,gBACAF,gBACAqB,UA7BF,WACElB,GAAiB,GACjBF,EAAiBL,GACjBG,EAAQ,IACRO,EAAWgB,QAAQC,UAAW,EAC9BjB,EAAWgB,QAAQE,SAyBnBpB,c,MCjBWqB,MA7Bf,WAAgB,IAAD,EAST9B,EAAY,IAPdW,EAFW,EAEXA,WACAW,EAHW,EAGXA,aACAnB,EAJW,EAIXA,KACAI,EALW,EAKXA,cACAF,EANW,EAMXA,cACAqB,EAPW,EAOXA,UACAjB,EARW,EAQXA,UAGF,OACE,gCACE,uDACA,0BACEsB,IAAKpB,EACLqB,SAAUV,EACVE,MAAOrB,EACPyB,UAAWrB,IAEb,kDAAqBF,KACrB,wBAAQ4B,QAASP,EAAWE,SAAUrB,EAAtC,mBAGA,8CAAiBE,SCvBvByB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.9b96fab9.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\n\r\nfunction useWordGame(startingTime) {\r\n  const [text, setText] = useState(\"\");\r\n  const [timeRemaining, setTimeRemaining] = useState(startingTime);\r\n  const [isTimeRunning, setIsTimeRunning] = useState(false);\r\n  const [wordCount, setWordCount] = useState(0);\r\n  const textBoxRef = useRef(null);\r\n\r\n  function handleChange(e) {\r\n    const { value } = e.target;\r\n    setText(value);\r\n  }\r\n\r\n  function calculateWordCount(text) {\r\n    const wordsArr = text.trim().split(\" \");\r\n    return wordsArr.filter((word) => word !== \"\").length;\r\n  }\r\n\r\n  function startGame() {\r\n    setIsTimeRunning(true);\r\n    setTimeRemaining(startingTime);\r\n    setText(\"\");\r\n    textBoxRef.current.disabled = false;\r\n    textBoxRef.current.focus();\r\n  }\r\n\r\n  function endGame() {\r\n    setIsTimeRunning(false);\r\n    setWordCount(calculateWordCount(text));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isTimeRunning && timeRemaining > 0) {\r\n      setTimeout(() => {\r\n        setTimeRemaining((time) => time - 1);\r\n      }, 1000);\r\n    } else if (timeRemaining === 0) {\r\n      endGame();\r\n    }\r\n  }, [timeRemaining, isTimeRunning]);\r\n\r\n  return {\r\n    textBoxRef,\r\n    handleChange,\r\n    text,\r\n    isTimeRunning,\r\n    timeRemaining,\r\n    startGame,\r\n    wordCount,\r\n  };\r\n}\r\n\r\nexport default useWordGame;\r\n","import React from \"react\";\r\nimport useWordGame from \"./hooks/useWordGame\";\r\nimport \"./styles.css\";\r\nfunction App() {\r\n  const {\r\n    textBoxRef,\r\n    handleChange,\r\n    text,\r\n    isTimeRunning,\r\n    timeRemaining,\r\n    startGame,\r\n    wordCount,\r\n  } = useWordGame(10);\r\n\r\n  return (\r\n    <div>\r\n      <h1>How fast do you type?</h1>\r\n      <textarea\r\n        ref={textBoxRef}\r\n        onChange={handleChange}\r\n        value={text}\r\n        disabled={!isTimeRunning}\r\n      />\r\n      <h4>Time remaining: {timeRemaining}</h4>\r\n      <button onClick={startGame} disabled={isTimeRunning}>\r\n        Start\r\n      </button>\r\n      <h1>Word count: {wordCount}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}